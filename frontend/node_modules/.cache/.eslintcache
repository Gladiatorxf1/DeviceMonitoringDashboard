[{"C:\\Users\\samee\\Desktop\\reactfolio\\DeviceMonitoringDashboard\\frontend\\src\\index.js":"1","C:\\Users\\samee\\Desktop\\reactfolio\\DeviceMonitoringDashboard\\frontend\\src\\App.jsx":"2","C:\\Users\\samee\\Desktop\\reactfolio\\DeviceMonitoringDashboard\\frontend\\src\\pages\\Dashboard.js":"3","C:\\Users\\samee\\Desktop\\reactfolio\\DeviceMonitoringDashboard\\frontend\\src\\pages\\Recording.js":"4"},{"size":311,"mtime":1752263327953,"results":"5","hashOfConfig":"6"},{"size":384,"mtime":1752263327946,"results":"7","hashOfConfig":"6"},{"size":3218,"mtime":1752263327955,"results":"8","hashOfConfig":"6"},{"size":7604,"mtime":1752266139600,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"p4r8ta",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"C:\\Users\\samee\\Desktop\\reactfolio\\DeviceMonitoringDashboard\\frontend\\src\\index.js",[],[],"C:\\Users\\samee\\Desktop\\reactfolio\\DeviceMonitoringDashboard\\frontend\\src\\App.jsx",[],[],"C:\\Users\\samee\\Desktop\\reactfolio\\DeviceMonitoringDashboard\\frontend\\src\\pages\\Dashboard.js",["23"],[],"C:\\Users\\samee\\Desktop\\reactfolio\\DeviceMonitoringDashboard\\frontend\\src\\pages\\Recording.js",["24","25"],[],"import { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction Recordings() {\r\n  const { deviceId } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const [isSyncing, setIsSyncing] = useState(false);\r\n  const [showFilter, setShowFilter] = useState(false);\r\n  const [filterLine, setFilterLine] = useState(\"\");\r\n  const [filterInOut, setFilterInOut] = useState(\"\");\r\n  const [filterDuration, setFilterDuration] = useState(\"\");\r\n  const [recordings, setRecordings] = useState([]);\r\n  const [date, setDate] = useState(\"2025-07-11\");\r\n  const [playingId, setPlayingId] = useState(null);\r\n\r\n  const fetchRecordings = async () => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://0c804fd8cb2a.ngrok-free.app/api/recordings/${deviceId}?date=${date}`,\r\n        {\r\n          headers: {\r\n            \"ngrok-skip-browser-warning\": \"true\",\r\n          },\r\n        }\r\n      );\r\n\r\n      if (!res.ok) {\r\n        throw new Error(`HTTP error! status: ${res.status}`);\r\n      }\r\n\r\n      const contentType = res.headers.get(\"content-type\");\r\n      if (!contentType || !contentType.includes(\"application/json\")) {\r\n        const text = await res.text();\r\n        console.error(\"Expected JSON but got:\", text.substring(0, 200));\r\n        throw new Error(\"Server returned HTML instead of JSON\");\r\n      }\r\n\r\n      const data = await res.json();\r\n      setRecordings(data);\r\n    } catch (error) {\r\n      console.error(\"‚ùå Fetch error:\", error);\r\n      setRecordings([]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchRecordings();\r\n  }, [date, deviceId]);\r\n\r\n  const handlePlay = (id) => {\r\n    setPlayingId((prev) => (prev === id ? null : id));\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      {/* Top Bar */}\r\n      <div className=\"flex flex-wrap justify-between items-center gap-2 mb-4\">\r\n        <button\r\n          onClick={() => navigate(\"/\")}\r\n          className=\"bg-gray-700 text-white px-4 py-2 rounded hover:bg-gray-800\"\r\n        >\r\n          ‚¨Ö Back\r\n        </button>\r\n\r\n        <input\r\n          type=\"date\"\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n          className=\"border p-2 rounded\"\r\n        />\r\n\r\n        <div className=\"space-x-2\">\r\n          <button\r\n            onClick={fetchRecordings}\r\n            className=\"bg-blue-500 text-white px-3 py-2 rounded hover:bg-blue-600\"\r\n          >\r\n            üîÑ RELOAD\r\n          </button>\r\n          <button\r\n            onClick={async () => {\r\n              setIsSyncing(true);\r\n              await fetchRecordings();\r\n              setTimeout(() => {\r\n                setIsSyncing(false);\r\n                alert(\"üîÑ Sync complete!\");\r\n              }, 1000);\r\n            }}\r\n            className=\"bg-green-500 text-white px-3 py-2 rounded hover:bg-green-600\"\r\n          >\r\n            üîÅ SYNC\r\n          </button>\r\n\r\n          <button\r\n            onClick={() => setShowFilter((prev) => !prev)}\r\n            className=\"bg-yellow-500 text-white px-3 py-2 rounded hover:bg-yellow-600\"\r\n          >\r\n            üîç FILTER\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {showFilter && (\r\n        <div className=\"bg-gray-100 p-4 rounded mb-4 space-y-3\">\r\n          <div className=\"flex flex-wrap gap-4\">\r\n            <div>\r\n              <label className=\"block text-sm\">Line</label>\r\n              <select\r\n                value={filterLine}\r\n                onChange={(e) => setFilterLine(e.target.value)}\r\n                className=\"border p-1 rounded\"\r\n              >\r\n                <option value=\"\">All</option>\r\n                <option value=\"1\">Line 1</option>\r\n                <option value=\"2\">Line 2</option>\r\n                <option value=\"3\">Line 3</option>\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm\">In/Out</label>\r\n              <select\r\n                value={filterInOut}\r\n                onChange={(e) => setFilterInOut(e.target.value)}\r\n                className=\"border p-1 rounded\"\r\n              >\r\n                <option value=\"\">All</option>\r\n                <option value=\"in\">In</option>\r\n                <option value=\"out\">Out</option>\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm\">Min Duration (s)</label>\r\n              <input\r\n                type=\"number\"\r\n                value={filterDuration}\r\n                onChange={(e) => setFilterDuration(e.target.value)}\r\n                className=\"border p-1 rounded w-24\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Recordings Table */}\r\n      {recordings.length === 0 ? (\r\n        <p className=\"text-red-600 font-semibold\">\r\n          No Recordings for current date\r\n        </p>\r\n      ) : (\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full border text-sm\">\r\n            <thead className=\"bg-gray-200 text-left\">\r\n              <tr>\r\n                <th className=\"p-2 border\">Name</th>\r\n                <th className=\"p-2 border\">Line</th>\r\n                <th className=\"p-2 border\">Channel</th>\r\n                <th className=\"p-2 border\">In/Out</th>\r\n                <th className=\"p-2 border\">Phone No</th>\r\n                <th className=\"p-2 border\">Duration</th>\r\n                <th className=\"p-2 border\">Date & Time</th>\r\n                <th className=\"p-2 border\">Comment</th>\r\n                <th className=\"p-2 border\">Play</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {recordings\r\n                .filter((rec) => {\r\n                  return (\r\n                    (filterLine === \"\" || rec.line === Number(filterLine)) &&\r\n                    (filterInOut === \"\" || rec.in_out === filterInOut) &&\r\n                    (filterDuration === \"\" ||\r\n                      rec.duration >= Number(filterDuration))\r\n                  );\r\n                })\r\n                .map((rec) => (\r\n                  <tr key={rec.id} className=\"hover:bg-gray-100\">\r\n                    <td className=\"p-2 border\">{rec.name}</td>\r\n                    <td className=\"p-2 border\">{rec.line}</td>\r\n                    <td className=\"p-2 border\">{rec.channel}</td>\r\n                    <td className=\"p-2 border\">{rec.in_out}</td>\r\n                    <td className=\"p-2 border\">{rec.phone_no}</td>\r\n                    <td className=\"p-2 border\">{rec.duration} s</td>\r\n                    <td className=\"p-2 border\">\r\n                      {new Date(rec.datetime).toLocaleString()}\r\n                    </td>\r\n                    <td className=\"p-2 border\">{rec.comment}</td>\r\n                    <td className=\"p-2 border\">\r\n                      {playingId === rec.id ? (\r\n                        <audio\r\n                          src={`https://0c804fd8cb2a.ngrok-free.app/recordings/${rec.filename}`}\r\n                          controls\r\n                          autoPlay\r\n                          onEnded={() => setPlayingId(null)}\r\n                        />\r\n                      ) : (\r\n                        <button\r\n                          onClick={() => handlePlay(rec.id)}\r\n                          className=\"bg-blue-600 text-white px-2 py-1 rounded\"\r\n                        >\r\n                          ‚ñ∂ Play\r\n                        </button>\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Recordings;\r\n",{"ruleId":"26","severity":1,"message":"27","line":10,"column":9,"nodeType":"28","messageId":"29","endLine":10,"endColumn":17},{"ruleId":"26","severity":1,"message":"30","line":8,"column":10,"nodeType":"28","messageId":"29","endLine":8,"endColumn":19},{"ruleId":"31","severity":1,"message":"32","line":49,"column":6,"nodeType":"33","endLine":49,"endColumn":22,"suggestions":"34"},"no-unused-vars","'navigate' is assigned a value but never used.","Identifier","unusedVar","'isSyncing' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchRecordings'. Either include it or remove the dependency array.","ArrayExpression",["35"],{"desc":"36","fix":"37"},"Update the dependencies array to be: [date, deviceId, fetchRecordings]",{"range":"38","text":"39"},[1584,1600],"[date, deviceId, fetchRecordings]"]